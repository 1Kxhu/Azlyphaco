[
	{
		label: 'FireClickDetector',
		kind: monaco.languages.CompletionItemKind.Method,
		documentation: "Simulates a click on the specified ClickDetector instance. The specified distance in studs simulates how far your character was from the click",
		detail: "WeAreDevs/Neuron API",
		insertText: 'FireClickDetector(',
	},
	{
		label: 'OpenWebsite',
		kind: monaco.languages.CompletionItemKind.Method,
		documentation: "Expects 1 string parameter which should be a website link. It then opens that link on the device's default browser",
		detail: "WeAreDevs API",
		insertText: 'OpenWebsite(',
	},
	{
		label: 'isRobloxFocused',
		kind: monaco.languages.CompletionItemKind.Method,
		documentation: "Returns true if the Roblox window is the active window, otherwise false (neuron also has isrbxactive())",
		detail: "WeAreDevs/Neuron API",
		insertText: 'isRobloxFocused()',
	},
	{
		label: 'GetClipboard',
		kind: monaco.languages.CompletionItemKind.Method,
		documentation: "Returns content from the clipboard (functionality on the EX api is unknown)",
		detail: "WeAreDevs/Neuron/SC API",
		insertText: 'getclipboard()',
	},
	{
		label: 'SetClipboard',
		kind: monaco.languages.CompletionItemKind.Method,
		documentation: "Writes first parameter's data to the clipboard (functionality on the EX api is unknown)",
		detail: "WeAreDevs/Neuron/SC API",
		insertText: 'setclipboard()',
	},
	{
		label: 'ReadFile',
		kind: monaco.languages.CompletionItemKind.Method,
		documentation: "Reads a file's content (from workspace) (functionality on the EX api is unknown)",
		detail: "Neuron/SC API",
		insertText: 'readfile()',
	},
	{
		label: 'WriteFile',
		kind: monaco.languages.CompletionItemKind.Method,
		documentation: "Reads a file's content (from workspace) (functionality on the EX api is unknown)",
		detail: "Neuron/SC API",
		insertText: 'writefile()',
	},
	{
		label: 'getnamecallmethod',
		kind: monaco.languages.CompletionItemKind.Method,
		documentation: "Returns the namecall method if the function is called in an __namecall metatable hook",
		detail: "CS API",
		insertText: 'getnamecallmethod()',
	},
	{
		label: 'hookfunction',
		kind: monaco.languages.CompletionItemKind.Method,
		documentation: "Replaces the first function argument with the second function argument (the old function is returned, you must use this function in order to call the original function)",
		detail: "CS API",
		insertText: 'hookfunction()',
	},
	{
		label: 'newcclosure',
		kind: monaco.languages.CompletionItemKind.Method,
		documentation: "Pushes a new CClosure that invokes <function> upon call (THIS REMOVES YOU FROM A MULTITUDE OF DETECTION VECTORS!)",
		detail: "Neuron/CS API",
		insertText: 'newcclosure()',
	},
	{
		label: 'getgc',
		kind: monaco.languages.CompletionItemKind.Method,
		documentation: "Gets the copy of the Lua garbage collector",
		detail: "CS API",
		insertText: 'getgc()',
	},
	{
		label: 'getreg',
		kind: monaco.languages.CompletionItemKind.Method,
		documentation: "Returns Roblox's registry (function environment)",
		detail: "WeAreDevs/Neuron/CS/SC API",
		insertText: 'getreg()',
	},
	{
		label: 'getrenv',
		kind: monaco.languages.CompletionItemKind.Method,
		documentation: "Returns Roblox's global environment in table form",
		detail: "WeAreDevs/Neuron/CS/SC API",
		insertText: 'getrenv()',
	},
	{
		label: 'getgenv',
		kind: monaco.languages.CompletionItemKind.Method,
		documentation: "Overwrites the used API's environment, or you can make your own global variables (remember this only works on the ShadowCheats api",
		detail: "WeAreDevs/Neuron/SC API",
		insertText: 'getgenv()',
	},
	{
		label: 'getrawmetatable',
		kind: monaco.languages.CompletionItemKind.Method,
		documentation: "This function is used on locked metatables (metatables that have the __metatable metamethod)",
		detail: "SC API",
		insertText: 'getrawmetatable()',
	},
	{
		label: 'setwriteable',
		kind: monaco.languages.CompletionItemKind.Method,
		documentation: "Sets the specified table as writeable",
		detail: "SC API",
		insertText: 'setwriteable()',
	},
	{
		label: 'setreadable',
		kind: monaco.languages.CompletionItemKind.Method,
		documentation: "Sets the specified table as readable",
		detail: "SC API",
		insertText: 'setreadable()',
	},
	{
		label: 'console.write',
		kind: monaco.languages.CompletionItemKind.Method,
		documentation: "Writes to the console as <color> <string>\n\nColors: blue, green, aqua, red, purple, yellow, white (their light variants as prefix 'light'), black, and gray",
		detail: "SC API",
		insertText: 'console.write()',
	},
	{
		label: 'console.setstatus',
		kind: monaco.languages.CompletionItemKind.Method,
		documentation: 'Accepts "hide" and "show" (as a string)',
		detail: "SC API",
		insertText: 'console.setstatus()',
	},
	{
		label: 'console.settitle',
		kind: monaco.languages.CompletionItemKind.Method,
		documentation: "Changes the console's title to the given string",
		detail: "SC API",
		insertText: 'console.settitle()',
	},
	{
		label: 'console.clear',
		kind: monaco.languages.CompletionItemKind.Method,
		documentation: "Clears the ShadowCheats console",
		detail: "SC API",
		insertText: 'console.clear()',
	},
	{
		label: 'getsenv',
		kind: monaco.languages.CompletionItemKind.Method,
		documentation: "Returns the environment of the script <1>",
		detail: "Neuron API",
		insertText: 'getsenv()',
	},
	{
		label: 'gettenv',
		kind: monaco.languages.CompletionItemKind.Method,
		documentation: "Gets the environment t",
		detail: "Neuron API",
		insertText: 'gettenv()',
	},
	{
		label: 'getmenv',
		kind: monaco.languages.CompletionItemKind.Method,
		documentation: "Gets the environment m",
		detail: "Neuron API",
		insertText: 'getmenv()',
	},
	{
		label: 'downloadstring',
		kind: monaco.languages.CompletionItemKind.Method,
		documentation: "Downloads a raw text file from <1> and stores it inside workspace/<2>",
		detail: "Neuron API",
		insertText: 'downloadstring()',
	},
	{
		label: 'loadfile',
		kind: monaco.languages.CompletionItemKind.Method,
		documentation: "Loads workspace/<1>",
		detail: "Neuron API",
		insertText: 'loadfile()',
	},
	{
		label: 'appendfile',
		kind: monaco.languages.CompletionItemKind.Method,
		documentation: "Appends <2> to the file contents at workspace/<1>",
		detail: "Neuron API",
		insertText: 'appendfile()',
	},
	{
		label: 'delfile',
		kind: monaco.languages.CompletionItemKind.Method,
		documentation: "Deletes workspace/<1>",
		detail: "Neuron API",
		insertText: 'delfile()',
	},
	{
		label: 'makefolder',
		kind: monaco.languages.CompletionItemKind.Method,
		documentation: "Makes the directory workspace/<1>",
		detail: "Neuron API",
		insertText: 'makefolder()',
	},
	{
		label: 'delfolder',
		kind: monaco.languages.CompletionItemKind.Method,
		documentation: "Deletes workspace/<1>",
		detail: "Neuron API",
		insertText: 'delfolder()',
	},
	{
		label: 'getinstances',
		kind: monaco.languages.CompletionItemKind.Method,
		documentation: "Returns all instances",
		detail: "Neuron API",
		insertText: 'getinstances()',
	},
	{
		label: 'getscripts',
		kind: monaco.languages.CompletionItemKind.Method,
		documentation: "Returns all scripts",
		detail: "Neuron API",
		insertText: 'getscripts()',
	},
	{
		label: 'getnilinstances',
		kind: monaco.languages.CompletionItemKind.Method,
		documentation: "Returns all instances parented to nil",
		detail: "Neuron API",
		insertText: 'getnilinstances()',
	},
	{
		label: 'iscclosure',
		kind: monaco.languages.CompletionItemKind.Method,
		documentation: "Returns true if the argument given is a c-side closure",
		detail: "Neuron API",
		insertText: 'iscclosure()',
	},
	{
		label: 'islclosure',
		kind: monaco.languages.CompletionItemKind.Method,
		documentation: "Returns true if the function given is a LClosure",
		detail: "Neuron API",
		insertText: 'islclosure()',
	},
	{
		label: 'messagebox',
		kind: monaco.languages.CompletionItemKind.Method,
		documentation: "Creates a new MessageBox with the text, title, buttons, icon (aliases: msgbox)",
		detail: "Neuron API",
		insertText: 'messagebox()',
	},
	{
		label: 'getinfo',
		kind: monaco.languages.CompletionItemKind.Method,
		documentation: "Returns a table of info pertaining to the lua function fi.",
		detail: "Neuron API",
		insertText: 'getinfo()',
	},
	{
		label: 'getglobals',
		kind: monaco.languages.CompletionItemKind.Method,
		documentation: "Returns a table of global values",
		detail: "Neuron API",
		insertText: 'getglobals()',
	},
	{
		label: 'getglobal',
		kind: monaco.languages.CompletionItemKind.Method,
		documentation: "Returns true if the specified global exists",
		detail: "Neuron API",
		insertText: 'getglobal()',
	},
	{
		label: 'getupvalues',
		kind: monaco.languages.CompletionItemKind.Method,
		documentation: "Retrieve the upvalues in function fi or at level fi",
		detail: "Neuron API",
		insertText: 'getupvalues()',
	},
	{
		label: 'getupvalue',
		kind: monaco.languages.CompletionItemKind.Method,
		documentation: "Returns the upvalue with name idx in function or level fi",
		detail: "Neuron API",
		insertText: 'getupvalue()',
	},
	{
		label: 'getcurrentstack',
		kind: monaco.languages.CompletionItemKind.Method,
		documentation: "Returns the current stack",
		detail: "Neuron API",
		insertText: 'getcurrentstack()',
	},
	{
		label: 'fixmetatable',
		kind: monaco.languages.CompletionItemKind.Method,
		documentation: "Fixes the game's metatables if you broke them with other functions",
		detail: "Neuron API",
		insertText: 'fixmetatable()',
	},
	{
		label: 'loadlib',
		kind: monaco.languages.CompletionItemKind.Method,
		documentation: "Very old library that some scripts may still use (aliases: LoadLibrary)",
		detail: "Neuron API",
		insertText: 'loadlib()',
	},
	{
		label: 'nrn.crypt.sha256',
		kind: monaco.languages.CompletionItemKind.Method,
		documentation: "Crypt Library\nHash function which are good for whitelists (similar: nrn.crypt.md5)",
		detail: "Neuron API",
		insertText: 'nrn.crypt.sha256()',
	},
	{
		label: 'nrn.crypt.md5',
		kind: monaco.languages.CompletionItemKind.Method,
		documentation: "Crypt Library\nHash function which are good for whitelists (similar: nrn.crypt.sha256)",
		detail: "Neuron API",
		insertText: 'nrn.crypt.md5()',
	},
	{
		label: 'nrn.gethwid',
		kind: monaco.languages.CompletionItemKind.Method,
		documentation: "Crypt Library\nUnique to the computer and are good for whitelists (similar: nrn.getfingerprint)",
		detail: "Neuron API",
		insertText: 'nrn.gethwid()',
	},
	{
		label: 'nrn.getfingerprint',
		kind: monaco.languages.CompletionItemKind.Method,
		documentation: "Crypt Library\nUnique to the computer and are good for whitelists (similar: nrn.gethwid)",
		detail: "Neuron API",
		insertText: 'nrn.getfingerprint()',
	},
	{
		label: 'nrn.crypt.base64encode',
		kind: monaco.languages.CompletionItemKind.Method,
		documentation: "Crypt Library\nEncrypts the argument using base64 (decode: nrn.crypt.base64decode)",
		detail: "Neuron API",
		insertText: 'nrn.crypt.base64encode()',
	},
	{
		label: 'nrn.crypt.base64decode',
		kind: monaco.languages.CompletionItemKind.Method,
		documentation: "Crypt Library\nDecrypts the argument using base64 (decode: nrn.crypt.base64encode)",
		detail: "Neuron API",
		insertText: 'nrn.crypt.base64decode()',
	},
	{
		label: 'nrn.crypt.byteencode',
		kind: monaco.languages.CompletionItemKind.Method,
		documentation: "Crypt Library\nEncrypts the argument using bytecode (decode: nrn.crypt.bytedecode)",
		detail: "Neuron API",
		insertText: 'nrn.crypt.byteencode()',
	},
	{
		label: 'nrn.crypt.bytedecode',
		kind: monaco.languages.CompletionItemKind.Method,
		documentation: "Crypt Library\nDecrypts the argument using bytecode (decode: nrn.crypt.byteencode)",
		detail: "Neuron API",
		insertText: 'nrn.crypt.bytedecode()',
	},
	{
		label: 'WrapGlobal',
		kind: monaco.languages.CompletionItemKind.Method,
		documentation: "Add your own method to the custom Lua environment",
		detail: "WeAreDevs/Neuron API",
		insertText: 'WrapGlobal()',
	},
	{
		label: 'setreadonly',
		kind: monaco.languages.CompletionItemKind.Method,
		documentation: "Sets the <table> to the second <bool> argument",
		detail: "WeAreDevs/Neuron API",
		insertText: 'setreadonly()',
	},
	{
		label: 'isreadonly',
		kind: monaco.languages.CompletionItemKind.Method,
		documentation: "Returns the <table>'s read-only condition",
		detail: "WeAreDevs/Neuron API",
		insertText: 'isreadonly()',
	},
	{
		label: 'syn.write_clipboard',
		kind: monaco.languages.CompletionItemKind.Method,
		documentation: "Writes content to the current Windows clipboard",
		detail: "Synapse Reroute",
		insertText: 'setclipboard(',
	},
	{
		label: 'syn.crypt.encrypt',
		kind: monaco.languages.CompletionItemKind.Method,
		documentation: "Encrypts data with key (algorithm used is AES-GCM, random nonce generated per call)",
		detail: "Synapse Reroute",
		insertText: 'nrn.crypt.byteencode(',
	},
	{
		label: 'syn.crypt.decrypt',
		kind: monaco.languages.CompletionItemKind.Method,
		documentation: "Decrypts data with key",
		detail: "Synapse Reroute",
		insertText: 'nrn.crypt.bytedecode(',
	},
	{
		label: 'syn.crypt.base64.encode',
		kind: monaco.languages.CompletionItemKind.Method,
		documentation: "Encodes data with base64",
		detail: "Synapse Reroute",
		insertText: 'nrn.crypt.base64encode(',
	},
	{
		label: 'syn.crypt.base64.decode',
		kind: monaco.languages.CompletionItemKind.Method,
		documentation: "Decodes data with base64",
		detail: "Synapse Reroute",
		insertText: 'nrn.crypt.base64decode(',
	},
	{
		label: 'syn.crypt.hash',
		kind: monaco.languages.CompletionItemKind.Method,
		documentation: "Hashes data with SHA-256",
		detail: "Synapse Reroute",
		insertText: 'nrn.crypt.sha256(',
	},
	{
		label: 'bit.tobit',
		kind: monaco.languages.CompletionItemKind.Method,
		documentation: "Bit Library\nNormalizes a number to the numeric range for bit operations and returns it",
		detail: "WeAreDevs/Neuron API",
		insertText: 'bit.tobit(',
	},
	{
		label: 'bit.tohex',
		kind: monaco.languages.CompletionItemKind.Method,
		documentation: "Bit Library\nConverts its first argument to a hex string",
		detail: "WeAreDevs/Neuron API",
		insertText: 'bit.tohex(',
	},
	{
		label: 'bit.bnot',
		kind: monaco.languages.CompletionItemKind.Method,
		documentation: "Bit Library\nReturns the bitwise not of its argument",
		detail: "WeAreDevs/Neuron API",
		insertText: 'bit.bnot(',
	},
]
